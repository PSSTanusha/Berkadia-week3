                                  SOAP vs. REST

SOAP – SOAP is a protocol which was designed before REST and came into the picture. The main idea behind designing SOAP was
to ensure that programs built on different platforms and programming languages could exchange data in an easy manner.

REST – This was designed specifically for working with components such as media components, files, or even objects on a 
particular hardware device. Any web service that is defined on the principles of REST can be called a RestFul web service. 
A Restful service would use the normal HTTP verbs of GET, POST, PUT and DELETE for working with the required components.

When to use REST and when to use SOAP:

REST services should be used in the following instance
1.Limited resources and bandwidth – Since SOAP messages are heavier in content and consume a far greater bandwidth, REST should
be used in instances where network bandwidth is a constraint.

2.Statelessness – If there is no need to maintain a state of information from one request to another then REST should be used. 
If you need a proper information flow wherein some information from one request needs to flow into another then SOAP is more 
suited for that purpose. We can take the example of any online purchasing site. These sites normally need the user first to 
add items which need to be purchased to a cart. All of the cart items are then transferred to the payment page in order to 
complete the purchase. This is an example of an application which needs the state feature. The state of the cart items needs 
to be transferred to the payment page for further processing.

3.Caching – If there is a need to cache a lot of requests then REST is the perfect solution. At times, clients could request
for the same resource multiple times. This can increase the number of requests which are sent to the server. By implementing 
a cache, the most frequent queries results can be stored in an intermediate location. So whenever the client requests for a 
resource, it will first check the cache. If the resources exist then, it will not proceed to the server. So caching can help 
in minimizing the amount of trips which are made to the web server.


4.Ease of coding – Coding REST Services and subsequent implementation is far easier than SOAP. So if a quick win solution 
is required for web services, then REST is the way to go.

SOAP should be used in the following instances
1.Asynchronous processing and subsequent invocation – if there is a requirement that the client needs a guaranteed level of 
reliability and security then the new SOAP standard of SOAP 1.2 provides a lot of additional features, especially when it 
comes to security.

2.A Formal means of communication – if both the client and server have an agreement on the exchange format then SOAP 1.2 
gives the rigid specifications for this type of interaction. An example is an online purchasing site in which users add 
items to a cart before the payment is made. Let's assume we have a web service that does the final payment. There can be 
a firm agreement that the web service will only accept the cart item name, unit price, and quantity. If such a scenario 
exists then, it's always better to use the SOAP protocol.

3.Stateful operations – if the application has a requirement that state needs to be maintained from one request to another, 
then the SOAP 1.2 standard provides the WS* structure to support such requirements.

SOAP vs. REST API challenges

Challenges with the SOAP API
1.WSDL file - One of the key challenges of the SOAP API is the WSDL document itself. The WSDL document is what tells the client 
of all the operations that can be performed by the web service. The WSDL document will contain all information such as the data 
types being used in the SOAP messages and what all operations are available via the web service

2.Document size – The other key challenge is the size of the SOAP messages which get transferred from the client to the server. 
Because of the large messages, using SOAP in places where bandwidth is a constraint can be a big issue.

Challenges with the REST API

1.Lack of Security – REST does not impose any sort of security like SOAP. This is why REST is very appropriate for public
available URL's, but when it comes down to confidential data being passed between the client and the server, REST is the worst 
mechanism to be used for web services.
2.Lack of state – Most web applications require a stateful mechanism. For example, if you had a purchasing site which had the 
mechanism of having a shopping cart, it is required to know the number of items in the shopping cart before the actual purchase 
is made. Unfortunately, the burden of maintaining this state lies with the client, which just makes the client application heavier 
and difficult to maintain.